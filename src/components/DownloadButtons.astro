---
---

<!-- Load html-to-image from CDN -->
<script src="https://cdn.jsdelivr.net/npm/html-to-image@1.11.11/dist/html-to-image.min.js"></script>

<button
  class="px-6 py-3 bg-rs-primary-500 text-white rounded-lg hover:bg-rs-primary-600 transition font-semibold shadow-lg"
  id="download-btn"
  type="button"
>
  📥 Download as Image
</button>

<script>
  // Add type declarations for external libraries
  declare global {
    interface Window {
      htmlToImage?: {
        toPng: (node: HTMLElement, options?: any) => Promise<string>;
      };
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const downloadBtn = document.getElementById('download-btn') as HTMLButtonElement | null;
    
    if (!downloadBtn) return;

    downloadBtn.addEventListener('click', async () => {
      const button = downloadBtn;
      const node = document.getElementById('signature-card') as HTMLElement | null;
      
      if (!node || !window.htmlToImage) {
        alert('Error: Unable to capture signature. Please try again.');
        return;
      }

      // Get the user's name for the filename
      const nameElement = document.querySelector('[data-field="name"]') as HTMLElement | null;
      const userName = nameElement?.textContent?.trim() || 'user';
      const sanitizedName = userName.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');
      const fileName = `${sanitizedName}_email_signature.png`;

      // Show loading state
      button.textContent = '⏳ Generating...';
      button.disabled = true;

      try {
        // Generate the image with better quality and preserve styling
        const dataUrl = await window.htmlToImage.toPng(node, {
          quality: 1.0,
          pixelRatio: 2, // Higher resolution
          backgroundColor: 'transparent', // Keep original background
          style: {
            transform: 'scale(1)',
            transformOrigin: 'top left',
            // Preserve all existing styles
            borderRadius: node.style.borderRadius || '0.75rem',
            boxShadow: getComputedStyle(node).boxShadow,
            border: getComputedStyle(node).border,
            padding: getComputedStyle(node).padding
          },
          filter: (element: HTMLElement) => {
            // Include all elements (don't filter out any)
            return true;
          },
          useCORS: true,
          allowTaint: true
        });

        // Create download link
        const link = document.createElement('a');
        link.download = fileName;
        link.href = dataUrl;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // Show success message
        button.textContent = '✅ Downloaded!';
        setTimeout(() => {
          button.textContent = '📥 Download as Image';
          button.disabled = false;
        }, 2000);

      } catch (error) {
        console.error('Download failed:', error);
        alert('Download failed. Please try again.');
        button.textContent = '📥 Download as Image';
        button.disabled = false;
      }
    });
  });
</script>